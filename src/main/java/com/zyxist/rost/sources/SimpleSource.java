/*
 * Copyright (C) 2017 The Rost Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.zyxist.rost.sources;

import com.zyxist.rost.api.ServiceLauncher;
import com.zyxist.rost.api.ServiceSource;
import com.zyxist.rost.meta.ServiceDescription;

import java.util.Collection;
import java.util.Objects;
import java.util.stream.Stream;

/**
 * Service source that reads the services from a plain Java collection.
 *
 * <p>The collection of the service launchers can be generated by the Dependency Injection
 * Container (e.g. Dagger or Guice) - most containers support 'multibindings' feature, where
 * the developer can register individual implementations of {@link ServiceLauncher} interface,
 * and the DI container constructs a set of all implementations. Such a set can be provided
 * as an input argument to {@link SimpleSource}.</p>
 *
 * <p>The order of the services is determined by the collection passed to the constructor.
 * You must decorate this source with {@link ComposingSource} in order to process
 * {@link com.zyxist.rost.api.RequiresServices} and {@link com.zyxist.rost.api.ProvidesService} annotations.</p>
 */
public class SimpleSource implements ServiceSource {
	private final Collection<ServiceLauncher> launchers;

	public SimpleSource(Collection<ServiceLauncher> launchers) {
		this.launchers = Objects.requireNonNull(launchers);
	}

	@Override
	public Stream<ServiceDescription> get() {
		return launchers.stream()
			.map(ServiceDescription::new);
	}
}
